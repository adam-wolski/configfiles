" Notes {{{

" # Dependencies
" * vim-plug plugin
" * ~/tmp/vim directory
" * ripgrep

" }}}
" Init {{{

    let g:author='Adam Wolski'
    let g:email='miniukof@gmail.com'
    let g:github='https://github.com/miniukof'

    if has('nvim')
        set termguicolors               " True color in terminal
        set inccommand=split            " Show incremental feedback for substitute
    endif
    set encoding=utf-8
    set statusline=[%n]\                " Buffer number
    set statusline+=%f%m%r%h%w\         " Filename and modification
    set statusline+=%=\                 " Bring rest to right
    set statusline+=%Y\                 " Filetype"
    set statusline+=%l,%v\ %p%%         " Line num col num and % of file
    set laststatus=2                    " Show statusline always
    set foldtext=MyFoldText()           " Set folding text to custom fn. (*Functions section)
    set foldmethod=syntax               " Set foldmethod to one based on syntax
    set softtabstop=4                   " Number of spaces that a <Tab> counts for while editing
    set tabstop=4                       " Number of spaces that a <Tab> counts for
    set shiftwidth=4                    " Number of spaces that << >> move by.
    set exrc                            " Load vimrc from current dir
    set hidden                          " Hide buffer instead of closing it
    syntax on                           " Enable syntax highlighting
    filetype on                         " Detect filetypes
    filetype plugin indent on           " Enable loading indent file for filetype
    set nonumber                        " Don't display line numbers
    set title                           " Show title in console title bar
    set mouse=a                         " Mouse, sometimes usefull
    set timeoutlen=1000 ttimeoutlen=0   " Faster insert to normal jump
    set nofoldenable                    " Disable folds on start, toggle with zi
    set wildmenu                        " Menu completion in command mode on <Tab>
    set wildmode=full                   " <Tab> cycles between all matching choices.
    let mapleader="\<Space>"            " Set leader shortcut to spacebar
    set lazyredraw 
    set backspace=indent,eol,start
    set grepprg=rg\ --vimgrep
    set undofile
    set undodir=~/tmp/vim               " Directory for undo files
    set undolevels=10000                " Bigger undo size
    set dir=~/tmp/vim                   " Directory for .swp files
    if has('unix')
            set dict+=/usr/share/dict/words
    endif

" }}}
" Plugins {{{

" Load plugins {{{

    call plug#begin()
    " Navigation Plugins {{{

        Plug 'junegunn/fzf' " Don't build this one, install from repo.
        Plug 'junegunn/fzf.vim'
        Plug 'Lokaltog/vim-easymotion'
        Plug 'derekwyatt/vim-fswitch'

    " }}}
    " Completation Plugins {{{

        Plug 'rdnetto/YCM-Generator', { 'branch': 'stable', 'for': ['c', 'cpp']}
        if has('win32')
            Plug 'Valloric/YouCompleteMe', { 'do': 'python install.py --clang-completer'}
        else
            Plug 'Valloric/YouCompleteMe', { 'do': 'python install.py --clang-completer --racer-completer --system-libclang --system-boost'}
        endif
        Plug 'honza/vim-snippets'
        Plug 'SirVer/ultisnips'
        Plug 'jiangmiao/auto-pairs'
        Plug 'tpope/vim-surround'

    " }}}
    " Visual Plugins {{{

        Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' }
        Plug 'luochen1990/rainbow'
        Plug 'equalsraf/neovim-gui-shim'

    " }}}
    " Language specific Plugins {{{

        Plug 'beyondmarc/opengl.vim', { 'for': ['c', 'cpp'] }
        Plug 'johnsyweb/vim-makeshift', { 'for': ['c', 'cpp'] }

        Plug 'rust-lang/rust.vim'

        Plug 'beyondmarc/hlsl.vim'
        Plug 'beyondmarc/glsl.vim'

        Plug 'PotatoesMaster/i3-vim-syntax'

    " }}}
    " Themes {{{

        Plug 'altercation/vim-colors-solarized'

    " }}}
    " Additional text objects {{{
    
        Plug 'michaeljsmith/vim-indent-object'
        
    " }}}
    " Other Plugins {{{

        if has('win32')
            Plug 'nfvs/vim-perforce'
        endif
        Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-eunuch'
        Plug 'benekastah/neomake'
        Plug 'Konfekt/FastFold'

    " }}}
    call plug#end()

" }}}
" Plugin configuration {{{

    "   FSwitch {{{

        au BufEnter *.frag let b:fswitchdst = 'vert' | let b:fswitchlocs = '.'
        au BufEnter *.vert let b:fswitchdst = 'frag' | let b:fswitchlocs = '.'
        au BufEnter *.h let b:fswitchdst = 'c' | let b:fswitchlocs = '.'
        au BufEnter *.c let b:fswitchdst = 'h' | let b:fswitchlocs = '.'

    " }}}
    "   UltiSnips {{{

        " Snippets variables
        let g:snips_author=g:author
        let g:snips_email=g:email
        let g:snips_github=g:github
        " Setup directories.
        let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]

    " }}}
    "   Rainbow Parentheses {{{

        let g:rainbow_active = 1
        let g:rainbow_conf = {
        \	'guifgs': ['#F44336', '#9C27B0', '#2aa198', '#009688'],
        \	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
        \	'operators': '_,_',
        \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
        \	'separately': {
        \		'*': {},
        \		'vim': {
        \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
        \		},
        \	}
        \}

    " }}}
    "   Easymotion {{{

        let g:EasyMotion_startofline = 0                " Keep cursor column when in JK motion
        let g:EasyMotion_smartcase = 1

    " }}}
    "   YouCompleteMe {{{

        let g:ycm_global_ycm_extra_conf = "~/.config/ycm_extra_conf.py"
        let g:ycm_confirm_extra_conf = 0                " Don't ask about ycm extra conf
        let g:ycm_complete_in_comments = 1              " Complete in comments
        let g:ycm_collect_identifiers_from_tags_files = 1
        let g:ycm_seed_identifiers_with_syntax = 1
        let g:ycm_add_preview_to_completeopt = 1
        let g:ycm_filepath_completion_use_working_dir=1
        if has('unix')
            let g:ycm_python_binary_path = '/usr/bin/python'
        endif

    " }}}
    "   FSF {{{

         " This is the default extra key bindings
        let g:fzf_action = {
          \ 'ctrl-t': 'tab split',
          \ 'ctrl-x': 'split',
          \ 'ctrl-v': 'vsplit' }

        " Default fzf layout
        " - down / up / left / right
        " - window (nvim only)
        let g:fzf_layout = { 'down': '~40%' }    

    " }}}
    "   Makeshift {{{

        let g:makeshift_on_startup = 1
        let g:makeshift_use_pwd_first = 1
        let g:makeshift_chdir = 1

    " }}}
    "   Neomake {{{

        nnoremap <F5> :Neomake<CR>
        let g:neomake_place_signs = 0
        let g:neomake_open_list = 2

" }}}
    "   Grepper {{{

        let g:grepper = {}
        let g:grepper.tools = ['rg']

" }}}

" }}}

" }}}
" Editing Settings {{{

set autoindent              " Keep indent of last line
set smartindent             " Use smart indent if there is no indent file
set scrolloff=5             " Keep x context lines above and below the cursor
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set tabstop=4               " <tab> inserts x spaces

" }}}
" Searching Settings {{{

set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex

" }}}
" Visual Settings {{{

set showcmd                 " Show command in bottom right
set background=dark         " Dark background by default
set showmatch               " Show matching parentesis
set cursorline              " Have a line indicate the cursor location
set wrap                    " Wrap text
set linebreak               " But don't wrap text in the middle of a word
set noerrorbells            " Don't bell or blink
set novisualbell
set t_vb=

if has('gui_running') || has('nvim')
    :set guioptions=
    if has('unix')
        :set guifont=Source\ Code\ Pro\ Ultra-Light\ 11
    else
        :set guifont=Source_Code_Pro:h10:cEASTEUROPE
    endif
    colorscheme nugl
else
    colorscheme solarized
endif


" }}}
" Shortcuts {{{

    " Global {{{

        " Quit window
        nnoremap <leader>q :q<CR>

        " Easymotion
        map <Leader>e <Plug>(easymotion-prefix)
        nmap <Leader><Leader> <Plug>(easymotion-s)

        " CtrlP and similiar shortcut
        nnoremap <C-p> :Files<CR>

        " Line Navigation, so it moves line down/up even with wrapping
        nnoremap j gj
        nnoremap k gk
        xnoremap j gj
        xnoremap k gk

        " window navigation
        nnoremap <silent> <C-k> :wincmd k<CR>
        nnoremap <silent> <C-j> :wincmd j<CR>
        nnoremap <silent> <C-h> :wincmd h<CR>
        nnoremap <silent> <C-l> :wincmd l<CR>

        " Paste from clipboard
        vnoremap <Leader>y "+y
        vnoremap <Leader>d "+d
        nnoremap <Leader>p "+p
        nnoremap <Leader>P "+P
        vnoremap <Leader>p "+p
        vnoremap <Leader>P "+P
        " Paste last yanked
        nnoremap P "0p
        vnoremap P "0p

        " Take cursor to end of pasted line
        vnoremap <silent> y y`]
        vnoremap <silent> p p`]
        nnoremap <silent> p p`]

        " hide matches on <leader>space
        nnoremap <leader>/ :nohlsearch<cr>

        " Add new line in insert mode
        inoremap <C-O> <C-o>o

        " Rebind macro playback
        nnoremap Q @

        " Handy shortcut for macro named q
        nnoremap QQ @q

        " Repalce word under cursor
        nnoremap <Leader>r :%s/\<<C-r><C-w>\>/

        " Ultisnips
        let g:UltiSnipsExpandTrigger='<c-s>'
        let g:UltiSnipsJumpForwardTrigger='<c-j>'
        let g:UltiSnipsJumpBackwardTrigger='<c-k>'

        if has('unix')
            " Insert mode completion with fzf
            imap <c-x><c-k> <plug>(fzf-complete-word)
            imap <c-x><c-f> <plug>(fzf-complete-path)
            imap <c-x><c-j> <plug>(fzf-complete-file-ag)
            imap <c-x><c-l> <plug>(fzf-complete-line)
        endif


    " }}}
    " File {{{

        nnoremap <leader>fs :w<CR>
        nnoremap <leader>ff :Files<CR>
        nnoremap <leader>fS :FSHere<CR>
        nnoremap <leader>f! :SudoWrite<CR>
        nnoremap <leader>fd :Remove<CR>
        nnoremap <leader>fm :Move 
        nnoremap <leader>fr :Rename 

    " }}}
    " Window {{{

        nnoremap <leader>wc :q<CR>
        nnoremap <leader>ws :split<CR>
        nnoremap <leader>wv :vsplit<CR>
        nnoremap <silent><leader>wk :wincmd k<CR>
        nnoremap <silent><leader>wj :wincmd j<CR>
        nnoremap <silent><leader>wh :wincmd h<CR>
        nnoremap <silent><leader>wl :wincmd l<CR>
        nnoremap <silent><leader>wK :wincmd K<CR>
        nnoremap <silent><leader>wJ :wincmd J<CR>
        nnoremap <silent><leader>wH :wincmd H<CR>
        nnoremap <silent><leader>wL :wincmd L<CR>
        nnoremap <silent><leader>w= :wincmd =<CR>
        nnoremap <silent><leader>wx :wincmd x<CR>
        nnoremap <silent><leader>wr :wincmd r<CR>
        nnoremap <silent><leader>wR :wincmd R<CR>

    " }}}
    " Buffer {{{

        nnoremap <leader><tab> :b#<CR>
        nnoremap <leader>b# :b#<CR>
        nnoremap <leader>bp :b#<CR>
        nnoremap <leader>bb :Buffers<CR>
        nnoremap <leader>bt :BTags<CR>
        nnoremap <leader>bd :bd<CR>
        nnoremap <leader>bl :ls<CR>
        nnoremap <leader>bY :%y+<CR>
        nnoremap <leader>bs :w<CR>

    " }}}
    " Toggle {{{

        nnoremap <silent><leader>tS :set spell!<CR>
        nnoremap <leader>tn :set number!<CR>
        nnoremap <leader>tr :set relativenumber!<CR>
        nnoremap <Leader>tsh :SemanticHighlightToggle<cr>
        nnoremap <leader>tig :IndentGuidesToggle<CR>
        nnoremap <leader>trp :RainbowToggle<CR>

    " }}}
    " Terminal {{{

        if has('nvim')

        " Start/Exit
        nnoremap <leader>' :call TerminalToggle()<CR>
        tnoremap <C-e> <C-\><C-n>:call TerminalToggle()<CR>

        " window navigation
        tnoremap <C-h> <C-\><C-n><C-w>h
        tnoremap <C-j> <C-\><C-n><C-w>j
        tnoremap <C-k> <C-\><C-n><C-w>k
        tnoremap <C-l> <C-\><C-n><C-w>l

        endif

    " }}}
    " Util {{{

        " Remove whitespace
        nnoremap <leader>uws :%s/\s\+$//<cr>:let @/=''<CR>

    " }}}
    " Git {{{

        nnoremap <leader>gd :Gdiff<CR>
        nnoremap <leader>gc :Gcommit<CR>
        nnoremap <leader>gs :Gstatus<CR>
        nnoremap <leader>gw :Gwrite<CR>

    " }}}
    " YouCompleteMe {{{
        nnoremap <leader>yy :YcmCompleter GoTo<CR> 
        nnoremap <leader>yt :YcmCompleter GetType<CR> 
        nnoremap <leader>yd :YcmCompleter GetDoc<CR> 
" }}}

" }}}
" Functions {{{

    function MyFoldText()
      let line = getline(v:foldstart)
      let sub = substitute(line, '"\|/\*\|\*/\|{{{\d\=\|}}}', '', 'g')
      return v:folddashes . sub
    endfunction

    if has('nvim')
        let g:terminal_buffer = -1
        function TerminalToggle()
            if bufnr("") == g:terminal_buffer
                close
            else
                if bufexists(g:terminal_buffer)
                    exec "vsp | b".g:terminal_buffer
                else
                    exec "vsp term://fish"
                    let g:terminal_buffer = bufnr("")
                endif
                startinsert!
            endif
        endfunction
    endif

" }}}
" Filetype Specific Settings {{{

    " C {{{

        " Override setting for .h files, which defaults to cpp for me.
        au BufEnter,BufRead,BufNewFile *.h set filetype=c

    " }}}
    " Chrome  {{{

        au BufNewFile,BufRead *.skn set filetype=ce_skin    " Chrome Engine skin filetype
        au BufNewFile,BufRead *.dmt set filetype=ce_mat     " Chrome Engine Material filetype
        au BufNewFile,BufRead *.mt,*.mth,*.ppfx,*.scr,*.scd set filetype=hlsl autoindent noexpandtab tabstop=4 softtabstop=4 shiftwidth=4

    " }}}
    " Vim {{{

        au filetype vim
          \ syn match fmrkr '"*{{{\|"*}}}'
          \ containedin=vimLineComment contained |
          \ hi def link fmrkr Ignore |
          \ set fdm=marker |
          \ set foldenable
        au FileType vim set sts=4 ts=4 sw=4

    " }}}
    " Shaders {{{
        au BufNewFile,BufRead *.shader set filetype=glsl
    " }}}

" }}}
